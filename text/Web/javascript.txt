***Basic programming

About JavaScript and Node.js. Notes for a course at Linnaeus University: https://coursepress.gitbook.io/1dv021/

The course features videos and 
https://eloquentjavascript.net/ the online book Eloquent JavaScript.
 The book JavaScript: The Good Parts is a recommended resource.

A few guides in setting up the environment with Git prepares for the exercises.

The course does not endorse semicolons however
https://google.github.io/styleguide/javascriptguide.xml#Semicolons the Google JavaScript style guide
 says "Always use semicolons. Relying on implicit insertion can cause subtle, hard to debug problems."

A potential problem is illustrated by the following which tries to call c(d+e):
<code>
a = b + c <br>
(d + e).print()
</code>

*Introduction

Goals:

<ul>
Types and structures of data.
Expressions, statements and conditionals.
Functions.
Objects and arrays.
Bug hunting.
Code version management.
Code quality.
Analyzing problems to find suitable designs.
</ul>

Chapters 1 to 12 of https://eloquentjavascript.net/ are used.

There are two examinations/parts with associated practice tasks.

Learning is not a spectator sport, if you don't actually try to solve problems you wont learn.

"Don't be afraid to ask questions. Don't be afraid to ask for help when you need it. I do that every day. Asking for help isn't a sign of weakness, it's a sign of strength. It shows you have the courage to admit when you don't know something, and then allows you to learn something new."
 --Barak Obama

Part 1:

<ul>
5 weeks.
Values, types and operators.
Expressions, statements and variables.
Conditionals and functions.
Arrays and objects.
Chapters 1-5.
</ul>

Part 2:

<ul>
4 weeks.
Objects: properties, methods, prototypes.
Objects: inheritance, overshadowing, polymorphism.
Bugs, error handling and regular expressions.
Modules.
Chapters 6-12.
</ul>

Development environment:

<ul>
IDE like Visual Studio Code or Geany.
https://nodejs.org/ Node.js (application environment)
https://www.npmjs.com/ npm (package manager)
https://git-scm.com/ Git (version control)
https://mochajs.org/ Mocha (testing framework)
https://standardjs.com/ JavaScript Standard Style
</ul>

*Lecture 1

Keywords: history, datatypes, Number, String, Boolean, Object, typeof, arithmetic, logic, expressions, statements, variables, keywords, reserved words, functions.

JavaScript 1.0 was launched 1995 to validate forms before sending them to the server.

Node.js is an open source platform used to run JavaScript code on a server.

You should know why 00101010 is 42 (aka the answer to everything).

A binary number can be interpreted as various types.

Primitives: Undefined, Null, Boolean, Number, Symbol and String.

Every value must be a primitive or an Object.

typeof 42   // 'number'

Functions are objects.

4.712e7   // exponentials (4.712 * 10^7 = 47120000)

13%5   // remainder (3 since 2*5+3=13)

4+(1+2)*3   // first parentheses then multiplication then addition, 13

Special numbers: infinity, -infinity, NaN (Not a Number)

The course standard prohibits " for string, use '

Use \n for new lines: 'Line one\ntwo.'

Boolean operations: <, >, <=, >=, ==, !=, === (includes type), !== (includes type), && (AND), || (OR), ! (NOT)

Variables are declared with let or var, var is for backwards compatibility, let is almost always better since variables wont leak to other scopes.

Use descriptive variable names. Don't use odd symbols. Use camelCasing. A tip is to append your initials to your variables, even if code works perfectly in Firefox another browser or package can have defined some system variables that get overwritten if you use ordinary variable names.

Forbidden names:

<ul>
await
delete
import
this
break
do
in
throw
case
else
instanceof
typeof
catch
export
newtry
class
extends
</ul>

<ul>
let
var
const
finally
return
void
continue
for
static
while
debugger
function
super
with
default
if
switch
yield
</ul>

<ul>
enum
interface
private
public
implements
package
protected
</ul>

Try console.log and Math.min(2,1,3)

Functions can be declared with 'let f=function(){return 1}' or 'function f(){return 1}'. If return is missing undefined is returned.

*Lecture 2

Control structures: if (else)(else if), switch, a?1:0, while, do...while, for, recursion (a function calling itself is a likely apocalyptic cause)

for (let i = 0; i < 10; i++) { }

Use break to exit a loop, continue to skip to next iteration.

Comments are made with // or, with caution, /* */. Commenting out blocks of code is not recommended for the long term, conditioning out with if (false) prevents code rot but still leaves confusing bloat.

*Lecture 3

Some functions are built in: console.log('Hej hopp!'); let result = Math.floor(3.14)

Functions are required to not repeat code, DRY (Don't Repeat Yourself) coding is crucial. It is good to have atleast one test for every function as this also serves as documentation, writing tests before the code has proven benefits such as increased modularity (see Test Driven Development).

Math.random() returns a value from 0 to 1.

const sayHello = function (name) { return 'Hello '+name }

Scopes are intricate, in short a variable declared inside a function is not accessible outside it.

For better and silent upstream toxin worse JavaScript simply ignores function calls with the wrong amount of arguments, resulting in weird undefined or NaN values showing up in unexpected places much later.

A function can be passed as an argument.

Closure: a function returns a nested function with access to the local scope.

*Lecture 4

Arrays start with index 0 and while they can hold values of multiple types this should be avoided.

An array arr is defined simply as [1,2,3], the number of elements is stored in a.length, arr[1]==2.

for (let i = 0; i < arr.length; i++) { }

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array Mozillas Array reference page.

An array variable only holds a reference to the array so if you set b=a and change b a will also be changed. To deepcopy an array with simple types (no functions) you can do b=JSON.parse(JSON.stringify(arr))

Push (append) a random number from 0 to 9 like so: arr.push(Math.floor(Math.random() * 10))

A function that takes an array and modifies it modifies the original array, it is necessary to clearly indicate which functions potentially modify their arguments to avoid silent data corruption.

To copy an array you can do c=arr.slice(). Note that unlike the JSON method above if arr contains nested arrays they will still be the same memory object in c.

With arr.sort() elements are sorted through string conversion, ie 10 comes before 2. To custom sort pass a function like so: arr.sort(function (a, b) { return a - b })

arr.forEach(function (value) { console.log(value) });

let sum = arr.reduce(function (a, b) { return a + b }, 0)

Remember to declare variables like sum with eg let or they will leak to global scope, strict mode prevents this.

arr.filter(function (a) { return a % 2 === 0 });

arr.map(function (a) { return a * 2 });

*Lecture 5

Objects are declared like so: let obj = { a: 'some', b: 1 }

Object variables hold references like for arrays.

An empty object can be declared like {} (or new Object()) and fields added like so: obj.c='here'

Object.create(Object.prototype[, properties]) is another option.

Object properties are accessed with obj.a or obj['b']

for (let propertyName in obj) { console.log(propertyName + ': ' + obj[propertyName]) }

Object.keys(obj) gives an array with the property names.

Use throw to abort with error: if (!Array.isArray(arr)) { throw new TypeError(`arr doesn't refer to an array.`) }

<code>
try {<br>
  bar(foo)<br>
} catch (e) {<br>
  console.error(e.message)<br>
}
</code>

*Lecture 6

<code>
const die = {
  faceValue: undefined,
  roll: function () {
    this.faceValue = Math.floor(Math.random() * 6) + 1
  }
}
</code>

The this keyword should be used sparingly as it can suddenly point to something unexpected, for example in callbacks. Check out the bind and call/apply functions.

Default argument values can be specified like so: function (greet = 'Hej!')

If you need many dices create a Factory: a function that creates a die object and then returns it; or a Constructor invoked with new.

<code>
function Die () {
  this.faceValue = undefined
  this.roll = function () {
    this.faceValue = Math.floor(Math.random() * 6) + 1
  }
}
const die = new Die()
console.log(Object.getOwnPropertyNames(die)) // OUTPUT: [ 'faceValue', 'roll' ]
</code>

Constructors accept parameters like ordinary functions.

To avoid duplicating the roll function in every Die object declare it as a prototype:
<code>
function Die () {
  this.faceValue = undefined
}
Die.prototype.roll = function () {
  this.faceValue = Math.floor(Math.random() * 6) + 1
}
const die = new Die()
</code>

The class syntax can be used since ECMAScript 2015:
<code>
class Die {
  constructor () {
    this.faceValue = undefined
  }
  roll () {
    this.faceValue = Math.floor(Math.random() * 6) + 1
  }
}
const die = new Die()
</code>

<yellow>
The designpattern OLOO (Object Linked to Other Objects) is an advanced alternative:
<code>
const Person = {
  talk: function () {
    console.log('Jag, ' + this.name + ', är ' + this.age + ' år.')
  }
}
const createPerson = function (name, age) {
  return Object.create(Person, {
    'name': {
      value: name,
      writable: true,
      enumerable: true,
      configurable: true
    },
    'age': {
      value: age,
      writable: true,
      enumerable: true,
      configurable: true
    }
  })
}
</code>
</div>
