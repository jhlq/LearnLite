***JavaScript exercises

Find associated code in the corresponding repositories at 
https://github.com/1dv021

Before you start:
<ol>
Open a terminal
git config --global alias.ignore '!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi'
Change to the (git initialized) directory for tasks
git remote add hello-world https://github.com/1dv021/exercise-hello-world.git
git remote -v
git subtree add --prefix=hello-world --squash hello-world master
git ignore node,visualstudiocode (or a better IDE),linux (or a worse OS) >> .gitignore
git add .
git commit -m 'Adding .gitignore'
git push
Start coding and make frequent commits.
</ol>

**Part 1

*A-level

###Hello, World!

<green>
Make a function that returns the text 'Hello, World!'
</div>

<yellow>
Make the function testable with npm:
<code>
describe('hello module', () => {
  describe('#sayHello()', () => {
    it('should return \'Hello, World!\'', () => {
      expect(hello.sayHello()).to.eql('Hello, World!')
    })
  })
})
</code>
</div>

###Simple addition

###Pre tiny funcs

<ul>
roundUp
roundDown
round
getStringLength
getFirstLetter
getIndexOfQuestionMark
isEqual
isOdd
isEven
</ul>

###Tiny funcs

<ul>
add
concat
round
getOddNumbers, return a string of odd numbers up to argument.
greetings, return different greetings depending on time of day.
replaceHyphensFor
replaceHyphensWhile
getNumberSequence, use two nested for to return strings like '11-12-13, 21-22-23, 31-32-33, 41-42-43, 51-52-53'.
</ul>

###Right triangle

Print a triangle with #'s.

###Data type determinator

Print the type of the argument.

###Shaver sharp html

<ul>
createBeginTag
createEndTag
createElement
createElements
</ul>

###Additional array copy

let newArray = ma.immutablePushNumber(arr, 4);

###Sorted array copy

###Sorting objects

Sort array of objects

*B-level

###Bugsy

Search names from initials using generator objects.

###Better than average

Filter an array of objects. Consider Array.reduce, Array.filter and Array.map.

###Reduced array

Get sum with Array.reduce.

*C-level

###Abacus

Adder that accepts variable number of arguments directly as numbers or parsed from strings. Optionally add support for nested arrays.

Useful concepts: 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments arguments object
, 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax spread syntax
, Array.concat, Array.some, String.indexOf, String.replace

###Harshad number

Find numbers evenly divisible by the sum of their digits: 24 since 24/(2+4)=4

Useful functions: Number.toString, String.split, parseInt.

###Reduced array of objects

Get sum with Array.reduce.

###The best of the best

Count frequencies of names in a list.

Useful functions: Array.every, Array.filter

**Part 2

*A-level

###Lego maker

Explore the factory, constructor (also with prototype) and class patterns.

###Constructive prototype of ellipse

Make a constructor/prototype pattern for ellipses and one for circles through inheritance.

###New classic ellipse

As above except with class syntax.

**Examinations

*Task 1: Descriptive statistics

https://github.com/1dv021/examination-1

JSDOC comment:
<code>
/**
 * Returns the descriptive information (maximum, mean, median, minimum, mode, range and standard deviation) from a set of numbers.
 *
 * @param {number[]} source The set of data to be analyzed.
 * @throws {TypeError} The passed argument is not an array.
 * @throws {Error} The passed array contains no elements.
 * @throws {TypeError} The passed array contains not just numbers.
 * @returns {{maximum: number, mean: number, median: number, minimum: number, mode: number[], range: number, standardDeviation: number}}
 */
</code>
Document your own functions too.

*Task 2: Twenty one

https://github.com/1dv021/examination-2

Note: This is not black jack, however if you aren't doing the formal examination feel free to implement the classical black jack game.


